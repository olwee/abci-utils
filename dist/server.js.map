{"version":3,"sources":["../src/server.js"],"names":["logger","child","module","ABCIHandler","handlers","route","msgType","msgVal","result","ABCIConnection","msgHandler","c","connId","info","mode","peerIP","remoteAddress","peerPort","remotePort","recvBuf","BL","isWaiting","writeData","dataBuf","write","err","emit","processRecvData","msgLen","msgLenRead","totalLen","length","msgBytes","slice","consume","pause","respBuf","message","handlerResp","on","resume","rawData","append","procErr","ABCIServer","appHandler","app","connector","server","net","createServer"],"mappings":"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","sourcesContent":["import net from 'net';\nimport pino from 'pino';\nimport BL from 'bl';\nimport { v4 as uuidv4 } from 'uuid';\nimport { decode as reqDecode, decodePadding } from './abci/msg_request';\nimport { encode as respEncode } from './abci/msg_response';\n\nconst logger = pino().child({ module: 'abci-server' });\n\nconst ABCIHandler = (handlers) => {\n  const route = async (msgType, msgVal) => {\n    if (typeof handlers[msgType] === 'undefined') return {};\n    const result = await handlers[msgType](msgVal);\n    return result;\n  };\n  return {\n    route,\n  };\n};\n\nconst ABCIConnection = (msgHandler) => (c) => {\n  const connId = uuidv4();\n  logger.info({\n    connId,\n    mode: 'established',\n    peerIP: c.remoteAddress,\n    peerPort: c.remotePort,\n  });\n  const recvBuf = new BL();\n  let isWaiting = false;\n\n  const writeData = (dataBuf) => {\n    c.write(dataBuf, (err) => {\n      if (err) c.emit('error', err);\n    });\n  };\n\n  const processRecvData = async () => {\n    const { msgLen, msgLenRead } = decodePadding(recvBuf);\n    const totalLen = msgLen + msgLenRead;\n    if (recvBuf.length < totalLen) return; // Buffering\n    const msgBytes = recvBuf.slice(msgLenRead, totalLen);\n    recvBuf.consume(totalLen);\n    const {\n      msgType,\n      msgVal,\n    } = reqDecode(msgBytes, false);\n\n    c.pause();\n    isWaiting = true;\n\n    if (msgType === 'echo') {\n      // Echo back the message\n      const respBuf = respEncode({ msgType: 'echo', msgVal: { message: msgVal.message } });\n      writeData(respBuf);\n      c.emit('evt-done');\n      return;\n    }\n\n    if (msgType === 'flush') {\n      // Reply Flush\n      const respBuf = respEncode({ msgType: 'flush', msgVal: {} });\n      writeData(respBuf);\n      c.emit('evt-done');\n      return;\n    }\n    try {\n      const handlerResp = await msgHandler.route(msgType, msgVal);\n      const respBuf = respEncode({ msgType, msgVal: handlerResp });\n      writeData(respBuf);\n      c.emit('evt-done');\n    } catch (handlerErr) {\n      if (handlerErr) {\n        c.emit('error', handlerErr);\n      }\n    }\n  };\n\n  c.on('evt-done', () => {\n    if (recvBuf.length > 0) {\n      processRecvData();\n      return;\n    }\n    isWaiting = false;\n    c.resume();\n  });\n\n  c.on('data', (rawData) => {\n    recvBuf.append(rawData);\n    if (isWaiting === true) return;\n    processRecvData()\n      .catch((procErr) => {\n        if (procErr) {\n          c.emit('error', procErr);\n        }\n      });\n  });\n\n  return {\n    writeData,\n  };\n};\n\nconst ABCIServer = (appHandler) => {\n  const app = ABCIHandler(appHandler);\n  const connector = ABCIConnection(app);\n\n  const server = net.createServer(connector);\n\n  return server;\n};\n\nexport default ABCIServer;\n"],"file":"server.js"}
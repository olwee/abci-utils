{"version":3,"sources":["../../../test/abci/test_msg_response.js"],"names":["describe","it","encoded","msgType","msgVal","message","assert","equal","toString"],"mappings":";;AAAA;;AACA;;AAEAA,QAAQ,CAAC,0BAAD,EAA6B,YAAM;AACzCA,EAAAA,QAAQ,CAAC,gBAAD,EAAmB,YAAM;AAC/BC,IAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAM;AACxC,UAAMC,OAAO,GAAG,0BAAO;AAAEC,QAAAA,OAAO,EAAE,MAAX;AAAmBC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAA3B,OAAP,CAAhB;;AACAC,mBAAOC,KAAP,CAAaL,OAAO,CAACM,QAAR,CAAiB,KAAjB,CAAb,EAAsC,gBAAtC;AACD,KAHC,CAAF;AAIAP,IAAAA,EAAE,CAAC,+BAAD,CAAF;AACD,GANO,CAAR;AAOAD,EAAAA,QAAQ,CAAC,iBAAD,EAAoB,YAAM;AAChCC,IAAAA,EAAE,CAAC,+BAAD,CAAF;AACD,GAFO,CAAR;AAGD,CAXO,CAAR","sourcesContent":["import { assert } from 'chai';\nimport { encode, decode } from '../../abci/msg_response';\n\ndescribe('# ABCI Response Messages', () => {\n  describe('# echo Message', () => {\n    it('should encode an echo message', () => {\n      const encoded = encode({ msgType: 'echo', msgVal: { message: 'hi' } });\n      assert.equal(encoded.toString('hex'), '0c12040a026869');\n    });\n    it('should decode an echo message');\n  });\n  describe('# flush Message', () => {\n    it('should encode a flush message');\n  });\n});\n"],"file":"test_msg_response.js"}
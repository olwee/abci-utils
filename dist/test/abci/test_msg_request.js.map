{"version":3,"sources":["../../../test/abci/test_msg_request.js"],"names":["describe","it","encoded","msgType","msgVal","message","assert","equal","toString","decoded","Buffer","from","deepEqual"],"mappings":";;AAAA;;AACA;;AAEAA,QAAQ,CAAC,yBAAD,EAA4B,YAAM;AACxCA,EAAAA,QAAQ,CAAC,gBAAD,EAAmB,YAAM;AAC/BC,IAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAM;AACxC,UAAMC,OAAO,GAAG,yBAAO;AAAEC,QAAAA,OAAO,EAAE,MAAX;AAAmBC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAA3B,OAAP,CAAhB;;AACAC,mBAAOC,KAAP,CAAaL,OAAO,CAACM,QAAR,CAAiB,KAAjB,CAAb,EAAsC,gBAAtC;AACD,KAHC,CAAF;AAIAP,IAAAA,EAAE,CAAC,2CAAD,EAA8C,YAAM;AACpD,UAAMC,OAAO,GAAG,yBAAO;AAAEC,QAAAA,OAAO,EAAE,MAAX;AAAmBC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAA3B,OAAP,EAAuD,KAAvD,CAAhB;;AACAC,mBAAOC,KAAP,CAAaL,OAAO,CAACM,QAAR,CAAiB,KAAjB,CAAb,EAAsC,UAAtC;AACD,KAHC,CAAF;AAIAP,IAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAM;AACxC,UAAMQ,OAAO,GAAG,yBAAOC,MAAM,CAACC,IAAP,CAAY,gBAAZ,EAA8B,KAA9B,CAAP,CAAhB;;AACAL,mBAAOM,SAAP,CAAiBH,OAAjB,EAA0B;AACxBN,QAAAA,OAAO,EAAE,MADe;AAExBC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAFgB,OAA1B;AAID,KANC,CAAF;AAOAJ,IAAAA,EAAE,CAAC,2CAAD,EAA8C,YAAM;AACpD,UAAMQ,OAAO,GAAG,yBAAOC,MAAM,CAACC,IAAP,CAAY,cAAZ,EAA4B,KAA5B,CAAP,EAA2C,KAA3C,CAAhB;;AACAL,mBAAOM,SAAP,CAAiBH,OAAjB,EAA0B;AACxBN,QAAAA,OAAO,EAAE,MADe;AAExBC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX;AAFgB,OAA1B;AAID,KANC,CAAF;AAOD,GAvBO,CAAR;AAwBAL,EAAAA,QAAQ,CAAC,iBAAD,EAAoB,YAAM;AAChCC,IAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAM;AACxC,UAAMC,OAAO,GAAG,yBAAO;AAAEC,QAAAA,OAAO,EAAE,OAAX;AAAoBC,QAAAA,MAAM,EAAE;AAA5B,OAAP,CAAhB;;AACAE,mBAAOC,KAAP,CAAaL,OAAO,CAACM,QAAR,CAAiB,KAAjB,CAAb,EAAsC,QAAtC;AACD,KAHC,CAAF;AAID,GALO,CAAR;AAMD,CA/BO,CAAR","sourcesContent":["import { assert } from 'chai';\nimport { encode, decode } from '../../abci/msg_request';\n\ndescribe('# ABCI Request Messages', () => {\n  describe('# echo Message', () => {\n    it('should encode an echo message', () => {\n      const encoded = encode({ msgType: 'echo', msgVal: { message: 'hi' } });\n      assert.equal(encoded.toString('hex'), '0c12040a026869');\n    });\n    it('should encode an echo message w/o wrapReq', () => {\n      const encoded = encode({ msgType: 'echo', msgVal: { message: 'hi' } }, false);\n      assert.equal(encoded.toString('hex'), '0a026869');\n    });\n    it('should decode an echo message', () => {\n      const decoded = decode(Buffer.from('0c12040a026869', 'hex'));\n      assert.deepEqual(decoded, {\n        msgType: 'echo',\n        msgVal: { message: 'hi' },\n      });\n    });\n    it('should decode an echo message w/o padding', () => {\n      const decoded = decode(Buffer.from('12040a026869', 'hex'), false);\n      assert.deepEqual(decoded, {\n        msgType: 'echo',\n        msgVal: { message: 'hi' },\n      });\n    });\n  });\n  describe('# flush Message', () => {\n    it('should encode a flush message', () => {\n      const encoded = encode({ msgType: 'flush', msgVal: {} });\n      assert.equal(encoded.toString('hex'), '041a00');\n    });\n  });\n});\n"],"file":"test_msg_request.js"}
{"version":3,"sources":["../../src/example/todo.js"],"names":["crypto","require","msgpack","axios","uuidv4","v4","hashTx","txBytes","createHash","update","digest","encodeTx","txName","txVal","txBody","type","value","msg","pack","decodeTx","txObj","unpack","Buffer","from","toString","err","isDef","x","Todo","appData","add","create","name","check","msgVal","deliver","todoId","todoList","push","id","complete","edit","remove","txIdx","findIndex","todo","unpackTx","txType","code","log","msgType","TodoApp","state","cache","checkTx","txKey","mempool","indexOf","txRes","deliverTx","memIdx","splice","broadcastTx","stdTx","txQuery","queryURL","headers","accept","method","url","broadcastResp","console","JSON","stringify","data","queryCLI","path","height","params","queryResp","query","module","exports"],"mappings":"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","sourcesContent":["const crypto = require('crypto');\nconst msgpack = require('msgpack');\nconst axios = require('axios');\nconst { v4: uuidv4 } = require('uuid');\n\nconst hashTx = (txBytes) => crypto.createHash('sha256').update(txBytes).digest('hex');\n\n// const encodeTx = (tx) => msgpack.pack(tx);\nconst encodeTx = (txName, txVal) => {\n  const txBody = {\n    type: 'todo/StdTx',\n    value: {\n      msg: {\n        type: txName,\n        value: txVal,\n      },\n    },\n  };\n  return msgpack.pack(txBody);\n};\n\nconst decodeTx = (txBytes) => {\n  try {\n    const txObj = msgpack.unpack(Buffer.from(txBytes.toString('hex'), 'hex'));\n    return txObj;\n  } catch (err) {\n    return null;\n  }\n};\n\nconst isDef = (x) => typeof x !== 'undefined';\n\nconst Todo = (appData) => {\n  const add = ({\n    create: (name) => encodeTx('add', name),\n    check: (msgVal) => typeof msgVal === 'string',\n    deliver: (msgVal) => {\n      // Mutate the state\n      const todoId = uuidv4();\n      appData.todoList.push({ id: todoId, name: msgVal, complete: false });\n      return true;\n    },\n  });\n  const edit = () => {};\n\n  const remove = () => {};\n\n  const complete = ({\n    create: (name) => encodeTx('complete', name),\n    check: () => true,\n    deliver: (msgVal) => {\n      // Mutate the state\n      const txIdx = appData.todoList.findIndex((todo) => todo.id === msgVal);\n      if (txIdx === -1) return false;\n      // eslint-disable-next-line\n      appData.todoList[txIdx] = { ...appData.todoList[txIdx], complete: true };\n      return true;\n    },\n  });\n\n  return {\n    add,\n    edit,\n    remove,\n    complete,\n  };\n};\n\n\nconst unpackTx = (txObj) => {\n  const { type: txType, value: txVal } = txObj;\n  if (!isDef(txType) || !isDef(txType)) return { code: 1, log: 'Fail to unpack tx contents' };\n  if (txType === 'todo/StdTx') {\n    const { msg } = txVal;\n    if (!isDef(msg)) return { code: 1, log: 'todo/StdTx is missing parameter msg' };\n    const { type: msgType, value: msgVal } = msg;\n    return { msgType, msgVal };\n    /*\n    const txRes = txSwitch[msgType][txOp](msgVal);\n    if (txOp === 'check' && txRes === true) return { code: 0, log: '' };\n    if (txOp === 'deliver' && txRes === true) return { code: 0, log: '' };\n    */\n  }\n  return null;\n  // return { code: 1, log: `No Handler found for tx ${txType}` };\n};\n\nconst TodoApp = (state) => {\n  const todo = Todo(state.cache.appData);\n\n  const checkTx = (txBytes) => {\n    const txKey = hashTx(txBytes.toString('hex'));\n    if (state.mempool.indexOf(txKey) === -1) {\n      state.mempool.push(txKey);\n      const txObj = decodeTx(txBytes);\n      if (txObj === null) return { code: 1, log: 'Fail to unpack tx with msgpack' };\n      const { msgType, msgVal } = unpackTx(txObj);\n      const txRes = todo[msgType].check(msgVal);\n      if (txRes === true) return { code: 0, log: '' };\n      return { code: 1, log: 'Tx Check Failed' };\n    }\n    return { code: 1, log: 'Tx Exists In Mempool' };\n  };\n\n  const deliverTx = (txBytes) => {\n    const txKey = hashTx(txBytes);\n    const memIdx = state.mempool.indexOf(txKey);\n    state.mempool.splice(memIdx, 1);\n    // Remove from mempool\n    const txObj = decodeTx(txBytes);\n    if (txObj === null) return { code: 1, log: 'Fail to unpack tx with msgpack' };\n    const { msgType, msgVal } = unpackTx(txObj);\n    const txRes = todo[msgType].deliver(msgVal);\n    if (txRes === true) return { code: 0, log: '' };\n    return { code: 1, log: 'Tx Deliver Failed' };\n  };\n\n  const broadcastTx = async (msgType, msgVal) => {\n    const stdTx = todo[msgType].create(msgVal);\n    const txQuery = `0x${stdTx.toString('hex')}`;\n    const queryURL = `http://127.0.0.1:26657/broadcast_tx_commit?tx=${txQuery}`;\n    const broadcastResp = await axios({\n      headers: { accept: 'application/json' },\n      method: 'get',\n      url: queryURL,\n    });\n    console.log(JSON.stringify(broadcastResp.data, null, 2));\n  };\n\n  const queryCLI = async ({\n    path,\n    height,\n    data,\n  }) => {\n    const queryURL = 'http://127.0.0.1:26657/abci_query';\n    const queryResp = await axios({\n      headers: { accept: 'application/json' },\n      method: 'get',\n      params: {\n        path: `\"${path}\"`,\n        height,\n        data,\n      },\n      url: queryURL,\n    });\n    console.log(JSON.stringify(queryResp.data, null, 2));\n  };\n\n  const query = () => ({});\n\n  return {\n    checkTx,\n    deliverTx,\n    query,\n    broadcastTx,\n    queryCLI,\n  };\n};\n\nmodule.exports = TodoApp;\n"],"file":"todo.js"}
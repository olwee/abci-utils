{"version":3,"sources":["../../src/example/index.js"],"names":["crypto","require","fs","pino","abciServer","stringify","TodoApp","logger","State","mempool","stateExists","pathExistsSync","writeJsonSync","chainData","lastBlockHeight","appData","spaces","cache","readJsonSync","todoList","getAppHash","hash","createHash","update","digest","updateChainData","k","v","persist","state","todoApp","server","info","data","version","appVersion","lastBlockAppHash","Buffer","from","beginBlock","request","rawHeight","header","height","nextHeight","Number","toString","checkTx","txBytesRaw","tx","txBytes","err","console","log","code","deliverTx","commit","appHash","query","req","listen"],"mappings":"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","sourcesContent":["const crypto = require('crypto');\nconst fs = require('fs-extra');\nconst pino = require('pino');\nconst abciServer = require('../server').default;\nconst stringify = require('json-stable-stringify');\nconst TodoApp = require('./todo');\n\nconst logger = pino();\n\nconst State = () => {\n  // Mempool always starts blank\n  const mempool = [];\n  // Check State File Exists\n  const stateExists = fs.pathExistsSync('state.json');\n  if (!stateExists) {\n    fs.writeJsonSync('state.json', {\n      chainData: {\n        lastBlockHeight: 0,\n      },\n      appData: {},\n    }, { spaces: 2 });\n  }\n  // Read from file\n  const cache = fs.readJsonSync('state.json');\n\n  if (typeof cache.appData.todoList === 'undefined') cache.appData.todoList = [];\n\n  const getAppHash = () => {\n    if (cache.chainData.lastBlockHeight === 0) return '';\n    const hash = crypto.createHash('sha256');\n    hash.update(stringify(cache.appData));\n    return hash.digest('hex');\n  };\n\n  const updateChainData = (k, v) => {\n    cache.chainData[k] = v;\n  };\n\n  const persist = () => {\n    fs.writeJsonSync('state.json', cache, { spaces: 2 });\n    return getAppHash();\n  };\n\n  return {\n    updateChainData,\n    getAppHash,\n    persist,\n    cache,\n    mempool,\n  };\n};\n\nconst state = State();\n\nconst todoApp = TodoApp(state);\n\nconst server = abciServer({\n  info: async () => ({\n    data: 'Node.Js Todo-App',\n    version: '0.0.0',\n    appVersion: 0,\n    lastBlockHeight: state.cache.chainData.lastBlockHeight,\n    lastBlockAppHash: Buffer.from(state.getAppHash(), 'hex'),\n  }),\n  beginBlock: async (request) => {\n    const { header: { height: rawHeight } } = request;\n    const nextHeight = Number(rawHeight.toString());\n    state.updateChainData('lastBlockHeight', nextHeight);\n    return {};\n  },\n  checkTx: (request) => {\n    const { tx: txBytesRaw } = request; // Base64\n    const txBytes = Buffer.from(txBytesRaw, 'base64');\n    try {\n      return todoApp.checkTx(txBytes);\n    } catch (err) {\n      console.log(err);\n      return { code: 1, log: 'ABCI App Err' };\n    }\n  },\n  deliverTx: (request) => {\n    const { tx: txBytesRaw } = request; // Base64\n    const txBytes = Buffer.from(txBytesRaw, 'base64');\n    try {\n      return todoApp.deliverTx(txBytes);\n    } catch (err) {\n      console.log(err);\n      return { code: 1, log: 'ABCI App Err' };\n    }\n  },\n  commit: () => {\n    // Here we persist the state to disk\n    const appHash = state.persist();\n    logger.info(`Commited Height: ${state.cache.chainData.lastBlockHeight} AppHash: ${appHash}`);\n    return {\n      data: Buffer.from(appHash, 'hex'),\n    };\n  },\n  query: (req) => todoApp.query(req),\n});\n\nserver.listen(26658);\n"],"file":"index.js"}
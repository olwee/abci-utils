{"version":3,"sources":["../../src/abci/msg_request.js"],"names":["encodePadding","abciReq","msgBytes","Buffer","from","serializeBinary","msgLenBytes","varint","encode","length","concat","decodePadding","rawBytes","maxLenBuf","alloc","copy","msgLen","decode","msgLenRead","bytes","wrapRequest","msgType","abciMsg","Request","setEcho","setFlush","ReqEcho","msgVal","wrapReq","echoReq","RequestEcho","message","setMessage","deserializeBinary","toObject","decodeReq","msgObj","getEcho","ReqFlush","flushReq","RequestFlush","getFlush","ReqInfo","getInfo","ReqCommit","getCommit","ReqCheckTx","getCheckTx","ReqDeliverTx","getDeliverTx","ReqBeginBlock","getBeginBlock","ReqInitChain","getInitChain","ReqEndBlock","getEndBlock","ReqQuery","getQuery","msgMap","echo","flush","info","initChain","query","beginBlock","checkTx","deliverTx","endBlock","commit","caseMap","method","hasPadding","Error","slice","msgEnum","getValueCase"],"mappings":"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","sourcesContent":["import { varint } from 'protocol-buffers-encodings';\n\nimport {\n  Request,\n  RequestEcho,\n  RequestFlush,\n} from '../../gen/types_pb';\n\nconst encodePadding = (abciReq) => {\n  const msgBytes = Buffer.from(abciReq.serializeBinary());\n  const msgLenBytes = Buffer.from(varint.encode(msgBytes.length << 1));\n  return Buffer.concat([msgLenBytes, msgBytes]);\n};\n\nconst decodePadding = (rawBytes) => {\n  const maxLenBuf = Buffer.alloc(8);\n  rawBytes.copy(maxLenBuf, 0, 0, 8);\n  const msgLen = varint.decode(maxLenBuf, 0) >> 1;\n  const msgLenRead = varint.decode.bytes;\n  return { msgLen, msgLenRead };\n};\n\nconst wrapRequest = (msgType, abciMsg) => {\n  const abciReq = new Request();\n  if (msgType === 'echo') abciReq.setEcho(abciMsg);\n  if (msgType === 'flush') abciReq.setFlush(abciMsg);\n  return encodePadding(abciReq);\n};\n\n\nconst ReqEcho = {};\n\nReqEcho.encode = (msgVal = {}, wrapReq = true) => {\n  const echoReq = new RequestEcho();\n  if (typeof msgVal.message !== 'undefined') echoReq.setMessage(msgVal.message);\n  if (wrapReq === false) return echoReq;\n  return wrapRequest('echo', echoReq);\n};\n\nReqEcho.decode = (rawBytes) => {\n  const abciReq = RequestEcho.deserializeBinary(rawBytes);\n  return { msgType: 'echo', msgVal: abciReq.toObject() };\n};\n\nReqEcho.decodeReq = (abciReq) => {\n  const msgObj = abciReq.getEcho();\n  return { msgType: 'echo', msgVal: msgObj.toObject() };\n};\n\nconst ReqFlush = {};\n\nReqFlush.encode = (msgVal = {}, wrapReq = true) => {\n  const flushReq = new RequestFlush();\n  if (wrapReq === false) return flushReq;\n  return wrapRequest('flush', flushReq);\n};\n\nReqEcho.decode = (rawBytes) => {\n  const abciReq = RequestFlush.deserializeBinary(rawBytes);\n  return { msgType: 'echo', msgVal: abciReq.toObject() };\n};\n\nReqFlush.decodeReq = (abciReq) => {\n  const msgObj = abciReq.getFlush();\n  return { msgType: 'flush', msgVal: msgObj.toObject() };\n};\n\nconst ReqInfo = {};\n\nReqInfo.decodeReq = (abciReq) => {\n  const msgObj = abciReq.getInfo();\n  return { msgType: 'info', msgVal: msgObj.toObject() };\n};\n\nconst ReqCommit = {};\n\nReqCommit.decodeReq = (abciReq) => {\n  const msgObj = abciReq.getCommit();\n  return { msgType: 'commit', msgVal: msgObj.toObject() };\n};\n\nconst ReqCheckTx = {};\n\nReqCheckTx.decodeReq = (abciReq) => {\n  const msgObj = abciReq.getCheckTx();\n  return { msgType: 'checkTx', msgVal: msgObj.toObject() };\n};\n\nconst ReqDeliverTx = {};\n\nReqDeliverTx.decodeReq = (abciReq) => {\n  const msgObj = abciReq.getDeliverTx();\n  return { msgType: 'deliverTx', msgVal: msgObj.toObject() };\n};\n\nconst ReqBeginBlock = {};\n\nReqBeginBlock.decodeReq = (abciReq) => {\n  const msgObj = abciReq.getBeginBlock();\n  return { msgType: 'beginBlock', msgVal: msgObj.toObject() };\n};\n\nconst ReqInitChain = {};\n\nReqInitChain.decodeReq = (abciReq) => {\n  const msgObj = abciReq.getInitChain();\n  return { msgType: 'initChain', msgVal: msgObj.toObject() };\n};\n\nconst ReqEndBlock = {};\n\nReqEndBlock.decodeReq = (abciReq) => {\n  const msgObj = abciReq.getEndBlock();\n  return { msgType: 'endBlock', msgVal: msgObj.toObject() };\n};\n\nconst ReqQuery = {};\n\nReqQuery.decodeReq = (abciReq) => {\n  const msgObj = abciReq.getQuery();\n  return { msgType: 'query', msgVal: msgObj.toObject() };\n};\n\nconst msgMap = {\n  echo: ReqEcho,\n  flush: ReqFlush,\n  info: ReqInfo,\n  initChain: ReqInitChain,\n  query: ReqQuery,\n  beginBlock: ReqBeginBlock,\n  checkTx: ReqCheckTx,\n  deliverTx: ReqDeliverTx,\n  endBlock: ReqEndBlock,\n  commit: ReqCommit,\n};\n\nconst caseMap = {\n  2: 'echo',\n  3: 'flush',\n  4: 'info',\n  5: 'setOption',\n  6: 'initChain',\n  7: 'query',\n  8: 'beginBlock',\n  9: 'checkTx',\n  19: 'deliverTx',\n  11: 'endBlock',\n  12: 'commit',\n};\n\nconst encode = ({\n  msgType,\n  msgVal = {},\n}, wrapReq = true) => {\n  const method = msgMap[msgType];\n  if (method !== 'undefined') {\n    const abciMsg = msgMap[msgType].encode(msgVal, false);\n    if (wrapReq === true) return wrapRequest(msgType, abciMsg);\n    return Buffer.from(abciMsg.serializeBinary());\n  }\n  return null;\n};\n\nconst decode = (rawBytes, hasPadding = true) => {\n  let msgBytes = Buffer.concat([rawBytes]);\n  if (hasPadding === true) {\n    const { msgLen, msgLenRead } = decodePadding(rawBytes);\n    if (rawBytes.length < (msgLen + msgLenRead)) throw Error('Unable to decode incomplete msg');\n    msgBytes = rawBytes.slice(msgLenRead, (msgLenRead + msgLen));\n  }\n  const abciReq = Request.deserializeBinary(msgBytes);\n  const msgEnum = caseMap[abciReq.getValueCase()];\n  return msgMap[msgEnum].decodeReq(abciReq, false);\n};\n\nexport {\n  encode,\n  decode,\n  decodePadding,\n};\n"],"file":"msg_request.js"}
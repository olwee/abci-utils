{"version":3,"sources":["../../src/abci/msg_response.js"],"names":["encodePadding","abciResp","msgBytes","Buffer","from","serializeBinary","msgLenBytes","varint","encode","length","concat","decodePadding","rawBytes","maxLenBuf","alloc","copy","msgLen","decode","msgLenRead","bytes","wrapResponse","msgType","abciMsg","Response","setEcho","setFlush","setInfo","setCommit","setCheckTx","setDeliverTx","setBeginBlock","setInitChain","setEndBlock","setQuery","RespEcho","msgVal","wrapResp","echoResp","ResponseEcho","message","setMessage","deserializeBinary","toObject","decodeResp","msgObj","getEcho","RespFlush","flushResp","ResponseFlush","RespInfo","infoResp","ResponseInfo","data","version","appVersion","lastBlockHeight","lastBlockAppHash","setData","setVersion","setAppVersion","setLastBlockHeight","setLastBlockAppHash","RespCommit","commitResp","ResponseCommit","RespCheckTx","checkTxResp","ResponseCheckTx","code","log","info","gasWanted","gasUsed","events","codespace","setCode","setLog","setGasWanted","setEvents","setCodespace","RespDeliverTx","deliverTxResp","ResponseDeliverTx","RespBeginBlock","beginBlockResp","ResponseBeginBlock","RespInitChain","initChainResp","ResponseInitChain","consensusParams","validators","setConsensusParams","setValidators","RespEndBlock","endBlockResp","ResponseEndBlock","RespQuery","queryResp","ResponseQuery","index","key","value","proof","height","setIndex","setKey","setValue","setProof","setHeight","msgMap","echo","flush","commit","checkTx","deliverTx","beginBlock","initChain","endBlock","query","caseMap","method","hasPadding","Error","slice","msgEnum","getValueCase"],"mappings":"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","sourcesContent":["import { varint } from 'protocol-buffers-encodings';\n\nimport {\n  Response,\n  ResponseEcho,\n  ResponseFlush,\n  ResponseInfo,\n  ResponseCommit,\n  ResponseCheckTx,\n  ResponseDeliverTx,\n  ResponseBeginBlock,\n  ResponseInitChain,\n  ResponseEndBlock,\n  ResponseQuery,\n} from '../../gen/types_pb';\n\nconst encodePadding = (abciResp) => {\n  const msgBytes = Buffer.from(abciResp.serializeBinary());\n  const msgLenBytes = Buffer.from(varint.encode(msgBytes.length << 1));\n  return Buffer.concat([msgLenBytes, msgBytes]);\n};\n\nconst decodePadding = (rawBytes) => {\n  const maxLenBuf = Buffer.alloc(8);\n  rawBytes.copy(maxLenBuf, 0, 0, 8);\n  const msgLen = varint.decode(maxLenBuf, 0) >> 1;\n  const msgLenRead = varint.decode.bytes;\n  return { msgLen, msgLenRead };\n};\n\nconst wrapResponse = (msgType, abciMsg) => {\n  const abciResp = new Response();\n  if (msgType === 'echo') abciResp.setEcho(abciMsg);\n  if (msgType === 'flush') abciResp.setFlush(abciMsg);\n  if (msgType === 'info') abciResp.setInfo(abciMsg);\n  if (msgType === 'commit') abciResp.setCommit(abciMsg);\n  if (msgType === 'checkTx') abciResp.setCheckTx(abciMsg);\n  if (msgType === 'deliverTx') abciResp.setDeliverTx(abciMsg);\n  if (msgType === 'beginBlock') abciResp.setBeginBlock(abciMsg);\n  if (msgType === 'initChain') abciResp.setInitChain(abciMsg);\n  if (msgType === 'endBlock') abciResp.setEndBlock(abciMsg);\n  if (msgType === 'query') abciResp.setQuery(abciMsg);\n  return encodePadding(abciResp);\n};\n\nconst RespEcho = {};\n\nRespEcho.encode = (msgVal = {}, wrapResp = true) => {\n  const echoResp = new ResponseEcho();\n  if (typeof msgVal.message !== 'undefined') echoResp.setMessage(msgVal.message);\n  if (wrapResp === false) return echoResp;\n  return wrapResponse('echo', echoResp);\n};\n\nRespEcho.decode = (rawBytes) => {\n  const abciResp = ResponseEcho.deserializeBinary(rawBytes);\n  return { msgType: 'echo', msgVal: abciResp.toObject() };\n};\n\nRespEcho.decodeResp = (abciResp) => {\n  const msgObj = abciResp.getEcho();\n  return { msgType: 'echo', msgVal: msgObj.toObject() };\n};\n\nconst RespFlush = {};\n\nRespFlush.encode = (msgVal = {}, wrapResp = true) => {\n  const flushResp = new ResponseFlush();\n  if (wrapResp === false) return flushResp;\n  return wrapResponse('flush', flushResp);\n};\n\nconst RespInfo = {};\n\nRespInfo.encode = (msgVal = {}, wrapResp = true) => {\n  const infoResp = new ResponseInfo();\n  const {\n    data,\n    version,\n    appVersion,\n    lastBlockHeight,\n    lastBlockAppHash,\n  } = msgVal;\n  if (typeof data !== 'undefined') infoResp.setData(data);\n  if (typeof version !== 'undefined') infoResp.setVersion(version);\n  if (typeof appVersion !== 'undefined') infoResp.setAppVersion(appVersion);\n  if (typeof lastBlockHeight !== 'undefined') infoResp.setLastBlockHeight(lastBlockHeight);\n  if (typeof lastBlockAppHash !== 'undefined') infoResp.setLastBlockAppHash(lastBlockAppHash);\n\n  if (wrapResp === false) return infoResp;\n  return wrapResponse('info', infoResp);\n};\n\nconst RespCommit = {};\n\nRespCommit.encode = (msgVal = {}, wrapResp = true) => {\n  const commitResp = new ResponseCommit();\n  const {\n    data,\n  } = msgVal;\n  if (typeof data !== 'undefined') commitResp.setData(data);\n\n  if (wrapResp === false) return commitResp;\n  return wrapResponse('commit', commitResp);\n};\n\nconst RespCheckTx = {};\n\nRespCheckTx.encode = (msgVal = {}, wrapResp = true) => {\n  const checkTxResp = new ResponseCheckTx();\n  const {\n    code,\n    data,\n    log,\n    info,\n    gasWanted,\n    gasUsed,\n    events,\n    codespace,\n  } = msgVal;\n  if (typeof code !== 'undefined') checkTxResp.setCode(code);\n  if (typeof data !== 'undefined') checkTxResp.setData(data);\n  if (typeof log !== 'undefined') checkTxResp.setLog(log);\n  if (typeof info !== 'undefined') checkTxResp.setInfo(info);\n  if (typeof gasWanted !== 'undefined') checkTxResp.setGasWanted(gasWanted);\n  if (typeof gasUsed !== 'undefined') checkTxResp.setGasWanted(gasUsed);\n  if (typeof events !== 'undefined') checkTxResp.setEvents(events);\n  if (typeof codespace !== 'undefined') checkTxResp.setCodespace(codespace);\n\n  if (wrapResp === false) return checkTxResp;\n  return wrapResponse('checkTx', checkTxResp);\n};\n\nconst RespDeliverTx = {};\n\nRespDeliverTx.encode = (msgVal = {}, wrapResp = true) => {\n  const deliverTxResp = new ResponseDeliverTx();\n  const {\n    code,\n    data,\n    log,\n    info,\n    gasWanted,\n    gasUsed,\n    events,\n    codespace,\n  } = msgVal;\n  if (typeof code !== 'undefined') deliverTxResp.setCode(code);\n  if (typeof data !== 'undefined') deliverTxResp.setData(data);\n  if (typeof log !== 'undefined') deliverTxResp.setLog(log);\n  if (typeof info !== 'undefined') deliverTxResp.setInfo(info);\n  if (typeof gasWanted !== 'undefined') deliverTxResp.setGasWanted(gasWanted);\n  if (typeof gasUsed !== 'undefined') deliverTxResp.setGasWanted(gasUsed);\n  if (typeof events !== 'undefined') deliverTxResp.setEvents(events);\n  if (typeof codespace !== 'undefined') deliverTxResp.setCodespace(codespace);\n\n  if (wrapResp === false) return deliverTxResp;\n  return wrapResponse('deliverTx', deliverTxResp);\n};\n\nconst RespBeginBlock = {};\n\nRespBeginBlock.encode = (msgVal = {}, wrapResp = true) => {\n  const beginBlockResp = new ResponseBeginBlock();\n  const {\n    events,\n  } = msgVal;\n  if (typeof events !== 'undefined') beginBlockResp.setEvents(events);\n\n  if (wrapResp === false) return beginBlockResp;\n  return wrapResponse('beginBlock', beginBlockResp);\n};\n\nconst RespInitChain = {};\n\nRespInitChain.encode = (msgVal = {}, wrapResp = true) => {\n  const initChainResp = new ResponseInitChain();\n  const {\n    consensusParams,\n    validators,\n  } = msgVal;\n  if (typeof consensusParams !== 'undefined') initChainResp.setConsensusParams(consensusParams);\n  if (typeof validators !== 'undefined') initChainResp.setValidators(validators);\n\n  if (wrapResp === false) return initChainResp;\n  return wrapResponse('initChain', initChainResp);\n};\n\nconst RespEndBlock = {};\n\nRespEndBlock.encode = (msgVal = {}, wrapResp = true) => {\n  const endBlockResp = new ResponseEndBlock();\n  const {\n    consensusParams,\n    validators,\n    events,\n  } = msgVal;\n  if (typeof consensusParams !== 'undefined') endBlockResp.setConsensusParams(consensusParams);\n  if (typeof validators !== 'undefined') endBlockResp.setValidators(validators);\n  if (typeof events !== 'undefined') endBlockResp.setEvents(events);\n\n  if (wrapResp === false) return endBlockResp;\n  return wrapResponse('initChain', endBlockResp);\n};\n\nconst RespQuery = {};\n\nRespQuery.encode = (msgVal = {}, wrapResp = true) => {\n  const queryResp = new ResponseQuery();\n  const {\n    code,\n    log,\n    info,\n    index,\n    key,\n    value,\n    proof,\n    height,\n    codespace,\n  } = msgVal;\n  if (typeof code !== 'undefined') queryResp.setCode(code);\n  if (typeof log !== 'undefined') queryResp.setLog(log);\n  if (typeof info !== 'undefined') queryResp.setInfo(info);\n  if (typeof index !== 'undefined') queryResp.setIndex(index);\n  if (typeof key !== 'undefined') queryResp.setKey(key);\n  if (typeof value !== 'undefined') queryResp.setValue(value);\n  if (typeof proof !== 'undefined') queryResp.setProof(proof);\n  if (typeof height !== 'undefined') queryResp.setHeight(height);\n  if (typeof codespace !== 'undefined') queryResp.setCodespace(codespace);\n\n  if (wrapResp === false) return queryResp;\n  return wrapResponse('query', queryResp);\n};\n\nconst msgMap = {\n  echo: RespEcho,\n  flush: RespFlush,\n  info: RespInfo,\n  commit: RespCommit,\n  checkTx: RespCheckTx,\n  deliverTx: RespDeliverTx,\n  beginBlock: RespBeginBlock,\n  initChain: RespInitChain,\n  endBlock: RespEndBlock,\n  query: RespQuery,\n};\n\nconst caseMap = {\n  2: 'echo',\n  3: 'flush',\n  4: 'info',\n  5: 'setOption',\n  6: 'initChain',\n  7: 'query',\n  8: 'beginBlock',\n  9: 'checkTx',\n  19: 'deliverTx',\n  11: 'endBlock',\n  12: 'commit',\n};\n\nconst encode = ({\n  msgType,\n  msgVal = {},\n}, wrapResp = true) => {\n  const method = msgMap[msgType];\n  if (method !== 'undefined') {\n    const abciMsg = msgMap[msgType].encode(msgVal, false);\n    if (wrapResp === true) return wrapResponse(msgType, abciMsg);\n    return Buffer.from(abciMsg.serializeBinary());\n  }\n  return null;\n};\n\nconst decode = (rawBytes, hasPadding = true) => {\n  let msgBytes = Buffer.concat([rawBytes]);\n  if (hasPadding === true) {\n    const { msgLen, msgLenRead } = decodePadding(rawBytes);\n    if (rawBytes.length < (msgLen + msgLenRead)) throw Error('Unable to decode incomplete msg');\n    msgBytes = rawBytes.slice(msgLenRead, (msgLenRead + msgLen));\n  }\n  const abciResp = Response.deserializeBinary(msgBytes);\n  const msgEnum = caseMap[abciResp.getValueCase()];\n  return msgMap[msgEnum].decodeResp(abciResp, false);\n};\n\nexport {\n  encode,\n  decode,\n  decodePadding,\n};\n"],"file":"msg_response.js"}